import yfinance as yf
data = yf.download("TCS.NS" ,start ="2020-01-01" )["Close"]
data
data.plot()
import numpy as np
log_return  = np.log(1 + data.pct_change()) 
log_return.plot()
S0 = data.iloc[-1]
S0
U = log_return.mean()
var = log_return.var()
drift= U - 0.5*var
drift
std = log_return.std() *np.sqrt(250)
std
time_steps = 21
iterations = 1000
dt = (1/12)/ time_steps

Z = np.random.standard_normal((time_steps + 1, iterations))
S = np.zeros_like(Z)

S0 = data.iloc[-1]  # make sure S0 is scalar
S[0] = S0

# Convert drift and std to scalar
drift = (log_return.mean() - 0.5 * log_return.var()).item()
std = (log_return.std() * np.sqrt(250)).item()

for t in range(1, time_steps + 1):
    S[t] = S[t-1] * np.exp((drift - 0.5 * std**2) * dt + std * np.sqrt(dt) * Z[t])
import matplotlib.pyplot as plt
plt.plot(S[:, :10])
plt.title("Simulated GBM Price Paths")
K = 3400  # strike
payoffs_call = np.maximum(S[-1] - K, 0)
r = 0.075  # risk-free rate
T = 0.1
call_price = np.exp(-r * T) * np.mean(payoffs_call)
put_price = np.exp(-r * T) * np.mean(payoffs_put)
call_price
put_price



to change the time frame change belwo parameters 

T = 1 / 12            # 1 month = ~0.0833 years
time_steps = 21       # ~21 trading days in a month
dt = T / time_steps   # Time increment adjusted to 1-month horizon

  
